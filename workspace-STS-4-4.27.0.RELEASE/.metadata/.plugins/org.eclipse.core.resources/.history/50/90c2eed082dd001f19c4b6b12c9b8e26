package org.formation.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.formation.model.Coffee;
import org.formation.service.CoffeeService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.FieldError;
import org.springframework.web.bind.MethodArgumentNotValidException;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import jakarta.validation.Valid;


@RestController
@RequestMapping("coffees")
public class CoffeeController {
	
	private static final Logger LOG = LoggerFactory.getLogger(CoffeeController.class);
	
	//pas besoin de @Autowired c'est considéré comme un bean
	private CoffeeService service;

	CoffeeController(CoffeeService service) {
		this.service = service;
	}
	
	//endpoint doivent avoir des s (bonnes pratiques)
	@GetMapping
	List<Coffee> getCoffees() {
		LOG.trace("==============> TRACE");
		LOG.debug("==============> DEBUG");
		LOG.info("==============> INFO");
		LOG.warn("==============> WARN");
		LOG.error("==============> ERROR");
		
		return service.getAll();
	}

	@PostMapping
	Coffee createCoffee(@RequestBody @Valid Coffee coffee) {
		return service.save(coffee);
	}
	
	@GetMapping("{id}")
	public ResponseEntity<Coffee> getCoffeeById(@PathVariable Long id) {
		return service.getById(id)
				.map(c -> ResponseEntity.ok(c))
				.orElse(ResponseEntity.notFound().build());
	}
	

}
